input {
    codec => multiline {
        pattern => "^NONEFIELD"
        negate => true
        what => previous
        auto_flush_interval => 1
        multiline_tag => ""
    }

    s3 {
        bucket => "${S3_BUCKET_VPC_FLOW}"
        prefix => "/beaconing-detection/vpc-flow-logs"
        include_object_properties => true
        id => "vpc-flow"
        type => "vpc-flow"
        tags => ["vpc-flow"]
    },
    s3 {
        id => "cloudsniper"
        bucket => "${S3_BUCKET_BEACONING_FINDINGS}"
        prefix => "/beaconing-detection/findings"
        include_object_properties => true
        tags => ["beaconing-findings"]
    }
    s3 {
        id => "cloudsniper"
        bucket => "${S3_BUCKET_IAM}"
        prefix => "/iam"
        include_object_properties => true
    }
    s3 {
        id => "cloudsniper"
        bucket => "${S3_BUCKET_IOCS}"
        prefix => "/iocs"
        include_object_properties => true
    }
}

filter {
    LOCAL_IP = "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)"

    def apply_geoip(ip_field, geo_field) {
        if [ip_field] !~ LOCAL_IP {
            geoip {
                source => ip_field
                target => geo_field
            }
        }
    }

    def apply_date(date_field) {
        date {
            match => [ date_field , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
    }

    if "vpc-flow" in [tags] {
        grok  {
            match => ["message", "%{NUMBER:version:int} %{NUMBER:cloud.account.id} %{NOTSPACE:interface_id} %{NOTSPACE:source.ip} %{NOTSPACE:destination.ip} %{NOTSPACE:source.port:int} %{NOTSPACE:destination.port:int} %{NOTSPACE:network.iana_number:int} %{NOTSPACE:source.packets:int} %{NOTSPACE:source.bytes:int} %{NUMBER:event.start:timestamp} %{NUMBER:@timestamp:timestamp} %{NOTSPACE:action} %{NOTSPACE:log_status}"]
        }

        apply_geoip("source.ip", "source.geo")
        apply_geoip("destination.ip", "destination.geo")

        mutate {
            copy => {
                "@timestamp" => "event.end"
            }
            add_field => {
                "cloud.provider" => "aws"
            }
        }

        apply_date("event.end")
        apply_date("event.start")
    } else {
        json {
            source => "message"
            remove_field => message
        }

        apply_geoip("[source.ip]", "source.geoip")
        apply_geoip("[destination.ip]", "destination.geoip")

        apply_date("event.end")
        apply_date("event.start")
    }
}

output {
  elasticsearch {
    hosts => ["${ES_HOST}"]
    ssl => true
    ssl_certificate_verification => true
    user => "${ES_USER}"
    password => "${ES_PASSWORD}"
    ilm_enabled => false
    index => "cloudsniper-%{+YYYY-MM.dd}"
  }
}
