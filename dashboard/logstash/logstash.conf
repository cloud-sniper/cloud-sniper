input {
    s3 {
        bucket => # put your bucket here
        prefix => "/beaconing-detection/vpc-flow-logs"
        include_object_properties => true
        id => "vpc-flow"
        type => "vpc-flow"
        tags => ["vpc-flow"]
    },
    s3 {
        id => "cloudsniper"
        bucket => # put your bucket here
        prefix => "/beaconing-detection/findings"
        include_object_properties => true
        tags => ["beaconing-findings"]
        codec => multiline {
          pattern => "^NONEFIELD"
          negate => true
          what => previous
          auto_flush_interval => 1
          multiline_tag => "" }
    }
    s3 {
        id => "cloudsniper"
        bucket => # put your bucket here
        prefix => "/iam"
        include_object_properties => true

        codec => multiline {
          pattern => "^NONEFIELD"
          negate => true
          what => previous
          auto_flush_interval => 1
          multiline_tag => "" }
    }
    s3 {
        id => "cloudsniper"
        bucket => # put your bucket here
        prefix => "/iocs"
        include_object_properties => true
        codec => multiline {
          pattern => "^NONEFIELD"
          negate => true
          what => previous
          auto_flush_interval => 1
          multiline_tag => "" }
    }
    s3 {
        id => "cloudsniper"
        bucket => # put your bucket here
        prefix => "/lusat"
        include_object_properties => true
        codec => multiline {
          pattern => "^NONEFIELD"
          negate => true
          what => previous
          auto_flush_interval => 1
          multiline_tag => "" }
    }
}

filter {
    if "vpc-flow" in [tags] {
        grok  {
            match => ["message", "%{NUMBER:version:int} %{NUMBER:cloud.account.id} %{NOTSPACE:interface_id} %{NOTSPACE:source.ip} %{NOTSPACE:destination.ip} %{NOTSPACE:source.port:int} %{NOTSPACE:destination.port:int} %{NOTSPACE:network.iana_number:int} %{NOTSPACE:source.packets:int} %{NOTSPACE:source.bytes:int} %{NUMBER:event.start:timestamp} %{NUMBER:@timestamp:timestamp} %{NOTSPACE:action} %{NOTSPACE:log_status}"]
        }

        if [srcaddr] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "source.ip"
                target => "source.geo"
            }
        }

        if [dstaddr] !~ "(^127\.0\.0\.1)|(^10\.)|(^172\.1[6-9]\.)|(^172\.2[0-9]\.)|(^172\.3[0-1]\.)|(^192\.168\.)|(^169\.254\.)" {
            geoip {
                source => "destination.ip"
                target => "destination.geo"
            }
        }
        mutate {
            copy => {
                "@timestamp" => "event.end"
                }
            add_field => {
                "cloud.provider" => "aws"
                }
        }
        date {
            match => [ "event.end" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
        date {
            match => [ "event.start" , "dd/MMM/yyyy:HH:mm:ss Z" ]
        }
    else {
    json {
      source => "message"
      remove_field => message
    }
    geoip {
      source => "[source.ip]"
      target => "source.geoip"
    }
    geoip {
      source => "[destination.ip]"
      target => "destination.geoip"
    }
    date {
        match => [ "event.end" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    date {
        match => [ "event.start" , "dd/MMM/yyyy:HH:mm:ss Z" ]
    }
    }
}

output {
  elasticsearch {
    hosts => ["https://localhost:9200"]
    ssl => true
    ssl_certificate_verification => false
    user => admin
    password => # put your password
    ilm_enabled => false
    index => "cloudsniper-%{+YYYY-MM-dd}"
    }
}